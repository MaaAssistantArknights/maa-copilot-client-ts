/* tslint:disable */
/* eslint-disable */
/**
 * MAA Copilot Center API
 * MAA Copilot Backend Center
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CopilotCUDRequest,
  CopilotRatingReq,
  MaaResultCopilotInfo,
  MaaResultCopilotPageInfo,
  MaaResultLong,
  MaaResultString,
  MaaResultUnit,
} from '../models/index';
import {
    CopilotCUDRequestFromJSON,
    CopilotCUDRequestToJSON,
    CopilotRatingReqFromJSON,
    CopilotRatingReqToJSON,
    MaaResultCopilotInfoFromJSON,
    MaaResultCopilotInfoToJSON,
    MaaResultCopilotPageInfoFromJSON,
    MaaResultCopilotPageInfoToJSON,
    MaaResultLongFromJSON,
    MaaResultLongToJSON,
    MaaResultStringFromJSON,
    MaaResultStringToJSON,
    MaaResultUnitFromJSON,
    MaaResultUnitToJSON,
} from '../models/index';

export interface DeleteCopilotRequest {
    copilotCUDRequest: CopilotCUDRequest;
}

export interface GetCopilotByIdRequest {
    id: number;
}

export interface ModifyStatusRequest {
    id: number;
    status: boolean;
}

export interface QueriesCopilotRequest {
    page?: number;
    limit?: number;
    levelKeyword?: string;
    operator?: string;
    content?: string;
    document?: string;
    uploaderId?: string;
    desc?: boolean;
    orderBy?: string;
    language?: string;
    copilotIds?: Array<number>;
}

export interface RatesCopilotOperationRequest {
    copilotRatingReq: CopilotRatingReq;
}

export interface UpdateCopilotRequest {
    copilotCUDRequest: CopilotCUDRequest;
}

export interface UploadCopilotRequest {
    copilotCUDRequest: CopilotCUDRequest;
}

/**
 * 
 */
export class CopilotControllerApi extends runtime.BaseAPI {

    /**
     * 删除作业
     */
    async deleteCopilotRaw(requestParameters: DeleteCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters.copilotCUDRequest === null || requestParameters.copilotCUDRequest === undefined) {
            throw new runtime.RequiredError('copilotCUDRequest','Required parameter requestParameters.copilotCUDRequest was null or undefined when calling deleteCopilot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/copilot/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotCUDRequestToJSON(requestParameters.copilotCUDRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 删除作业
     */
    async deleteCopilot(requestParameters: DeleteCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.deleteCopilotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 获取作业
     */
    async getCopilotByIdRaw(requestParameters: GetCopilotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultCopilotInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCopilotById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/copilot/get/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultCopilotInfoFromJSON(jsonValue));
    }

    /**
     * 获取作业
     */
    async getCopilotById(requestParameters: GetCopilotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultCopilotInfo> {
        const response = await this.getCopilotByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 修改通知状态
     */
    async modifyStatusRaw(requestParameters: ModifyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling modifyStatus.');
        }

        if (requestParameters.status === null || requestParameters.status === undefined) {
            throw new runtime.RequiredError('status','Required parameter requestParameters.status was null or undefined when calling modifyStatus.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/copilot/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 修改通知状态
     */
    async modifyStatus(requestParameters: ModifyStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.modifyStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 分页查询作业，提供登录凭据时查询用户自己的作业
     */
    async queriesCopilotRaw(requestParameters: QueriesCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultCopilotPageInfo>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.levelKeyword !== undefined) {
            queryParameters['levelKeyword'] = requestParameters.levelKeyword;
        }

        if (requestParameters.operator !== undefined) {
            queryParameters['operator'] = requestParameters.operator;
        }

        if (requestParameters.content !== undefined) {
            queryParameters['content'] = requestParameters.content;
        }

        if (requestParameters.document !== undefined) {
            queryParameters['document'] = requestParameters.document;
        }

        if (requestParameters.uploaderId !== undefined) {
            queryParameters['uploaderId'] = requestParameters.uploaderId;
        }

        if (requestParameters.desc !== undefined) {
            queryParameters['desc'] = requestParameters.desc;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.copilotIds) {
            queryParameters['copilotIds'] = requestParameters.copilotIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/copilot/query`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultCopilotPageInfoFromJSON(jsonValue));
    }

    /**
     * 分页查询作业，提供登录凭据时查询用户自己的作业
     */
    async queriesCopilot(requestParameters: QueriesCopilotRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultCopilotPageInfo> {
        const response = await this.queriesCopilotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 为作业评分
     */
    async ratesCopilotOperationRaw(requestParameters: RatesCopilotOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultString>> {
        if (requestParameters.copilotRatingReq === null || requestParameters.copilotRatingReq === undefined) {
            throw new runtime.RequiredError('copilotRatingReq','Required parameter requestParameters.copilotRatingReq was null or undefined when calling ratesCopilotOperation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/copilot/rating`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotRatingReqToJSON(requestParameters.copilotRatingReq),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultStringFromJSON(jsonValue));
    }

    /**
     * 为作业评分
     */
    async ratesCopilotOperation(requestParameters: RatesCopilotOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultString> {
        const response = await this.ratesCopilotOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新作业
     */
    async updateCopilotRaw(requestParameters: UpdateCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultUnit>> {
        if (requestParameters.copilotCUDRequest === null || requestParameters.copilotCUDRequest === undefined) {
            throw new runtime.RequiredError('copilotCUDRequest','Required parameter requestParameters.copilotCUDRequest was null or undefined when calling updateCopilot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/copilot/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotCUDRequestToJSON(requestParameters.copilotCUDRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultUnitFromJSON(jsonValue));
    }

    /**
     * 更新作业
     */
    async updateCopilot(requestParameters: UpdateCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultUnit> {
        const response = await this.updateCopilotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 上传作业
     */
    async uploadCopilotRaw(requestParameters: UploadCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MaaResultLong>> {
        if (requestParameters.copilotCUDRequest === null || requestParameters.copilotCUDRequest === undefined) {
            throw new runtime.RequiredError('copilotCUDRequest','Required parameter requestParameters.copilotCUDRequest was null or undefined when calling uploadCopilot.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/copilot/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CopilotCUDRequestToJSON(requestParameters.copilotCUDRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MaaResultLongFromJSON(jsonValue));
    }

    /**
     * 上传作业
     */
    async uploadCopilot(requestParameters: UploadCopilotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MaaResultLong> {
        const response = await this.uploadCopilotRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
