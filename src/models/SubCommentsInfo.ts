/* tslint:disable */
/* eslint-disable */
/**
 * MAA Copilot Center API
 * MAA Copilot Backend Center
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SubCommentsInfo
 */
export interface SubCommentsInfo {
    /**
     * 
     * @type {string}
     * @memberof SubCommentsInfo
     */
    commentId: string;
    /**
     * 
     * @type {string}
     * @memberof SubCommentsInfo
     */
    uploader: string;
    /**
     * 
     * @type {string}
     * @memberof SubCommentsInfo
     */
    uploaderId: string;
    /**
     * 
     * @type {string}
     * @memberof SubCommentsInfo
     */
    message: string;
    /**
     * 
     * @type {Date}
     * @memberof SubCommentsInfo
     */
    uploadTime: Date;
    /**
     * 
     * @type {number}
     * @memberof SubCommentsInfo
     */
    like: number;
    /**
     * 
     * @type {number}
     * @memberof SubCommentsInfo
     */
    dislike: number;
    /**
     * 
     * @type {string}
     * @memberof SubCommentsInfo
     */
    fromCommentId: string;
    /**
     * 
     * @type {string}
     * @memberof SubCommentsInfo
     */
    mainCommentId: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubCommentsInfo
     */
    deleted: boolean;
}

/**
 * Check if a given object implements the SubCommentsInfo interface.
 */
export function instanceOfSubCommentsInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "commentId" in value;
    isInstance = isInstance && "uploader" in value;
    isInstance = isInstance && "uploaderId" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "uploadTime" in value;
    isInstance = isInstance && "like" in value;
    isInstance = isInstance && "dislike" in value;
    isInstance = isInstance && "fromCommentId" in value;
    isInstance = isInstance && "mainCommentId" in value;
    isInstance = isInstance && "deleted" in value;

    return isInstance;
}

export function SubCommentsInfoFromJSON(json: any): SubCommentsInfo {
    return SubCommentsInfoFromJSONTyped(json, false);
}

export function SubCommentsInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubCommentsInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'commentId': json['comment_id'],
        'uploader': json['uploader'],
        'uploaderId': json['uploader_id'],
        'message': json['message'],
        'uploadTime': (new Date(json['upload_time'])),
        'like': json['like'],
        'dislike': json['dislike'],
        'fromCommentId': json['from_comment_id'],
        'mainCommentId': json['main_comment_id'],
        'deleted': json['deleted'],
    };
}

export function SubCommentsInfoToJSON(value?: SubCommentsInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'comment_id': value.commentId,
        'uploader': value.uploader,
        'uploader_id': value.uploaderId,
        'message': value.message,
        'upload_time': (value.uploadTime.toISOString()),
        'like': value.like,
        'dislike': value.dislike,
        'from_comment_id': value.fromCommentId,
        'main_comment_id': value.mainCommentId,
        'deleted': value.deleted,
    };
}

