/* tslint:disable */
/* eslint-disable */
/**
 * MAA Copilot Center API
 * MAA Copilot Backend Center
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CopilotSetStatus } from './CopilotSetStatus';
import {
    CopilotSetStatusFromJSON,
    CopilotSetStatusFromJSONTyped,
    CopilotSetStatusToJSON,
} from './CopilotSetStatus';

/**
 * 
 * @export
 * @interface CopilotSetRes
 */
export interface CopilotSetRes {
    /**
     * 
     * @type {number}
     * @memberof CopilotSetRes
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof CopilotSetRes
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof CopilotSetRes
     */
    description: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CopilotSetRes
     */
    copilotIds: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof CopilotSetRes
     */
    creatorId: string;
    /**
     * 
     * @type {string}
     * @memberof CopilotSetRes
     */
    creator: string;
    /**
     * 
     * @type {Date}
     * @memberof CopilotSetRes
     */
    createTime: Date;
    /**
     * 
     * @type {Date}
     * @memberof CopilotSetRes
     */
    updateTime: Date;
    /**
     * 
     * @type {CopilotSetStatus}
     * @memberof CopilotSetRes
     */
    status: CopilotSetStatus;
}

/**
 * Check if a given object implements the CopilotSetRes interface.
 */
export function instanceOfCopilotSetRes(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "copilotIds" in value;
    isInstance = isInstance && "creatorId" in value;
    isInstance = isInstance && "creator" in value;
    isInstance = isInstance && "createTime" in value;
    isInstance = isInstance && "updateTime" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function CopilotSetResFromJSON(json: any): CopilotSetRes {
    return CopilotSetResFromJSONTyped(json, false);
}

export function CopilotSetResFromJSONTyped(json: any, ignoreDiscriminator: boolean): CopilotSetRes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'],
        'copilotIds': json['copilot_ids'],
        'creatorId': json['creator_id'],
        'creator': json['creator'],
        'createTime': (new Date(json['create_time'])),
        'updateTime': (new Date(json['update_time'])),
        'status': CopilotSetStatusFromJSON(json['status']),
    };
}

export function CopilotSetResToJSON(value?: CopilotSetRes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'description': value.description,
        'copilot_ids': value.copilotIds,
        'creator_id': value.creatorId,
        'creator': value.creator,
        'create_time': (value.createTime.toISOString()),
        'update_time': (value.updateTime.toISOString()),
        'status': CopilotSetStatusToJSON(value.status),
    };
}

